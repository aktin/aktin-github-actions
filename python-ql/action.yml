name: 'Python QL'

description: 'Python Quality Checks'

inputs:
  src-path:
    description: 'Path to src/ directory'
    required: true

  python-version:
    description: 'Python version'
    required: true
    default: '3.x'

  pylint-ini-path:
    description: 'Path to the pylint ini file'
    required: false

  bandit-toml-path:
    description: 'Path to the bandit toml file'
    required: false

  integration-test-path:
    description: 'Path to the integration test script'
    required: false

  dependencies:
    description: 'Additional Python dependencies to install'
    required: false

  run-formatting:
    description: 'Run black code formatting'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ inputs.python-version }}

    - name: Cache Python packages
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
        fi
        pip install pytest pylint black bandit ${{ inputs.dependencies }}
      shell: bash

    - name: Code Formatting
      if: inputs.run-formatting == 'true'
      run: black ${{ inputs.src-path }}
      shell: bash

    - name: Linting and Code Quality
      run: |
        pylint_options="--fail-under=9.0"
        if [[ -f "${{ inputs.pylint-ini-path }}" ]]; then
          pylint_options="$pylint_options --rcfile=${{ inputs.pylint-ini-path }}"
        fi
        pylint $pylint_options ${{ inputs.src-path }}
      shell: bash

    - name: Security Scan
      run: |
        bandit_options="-ll"
        if [[ -f "${{ inputs.bandit-toml-path }}" ]]; then
          bandit_options="$bandit_options -c ${{ inputs.bandit-toml-path }}"
        fi
        bandit $bandit_options -r ${{ inputs.src-path }}
      shell: bash

    - name: Integration Testing
      if: inputs.integration-test-path
      run: |
        if [[ -f "${{ inputs.integration-test-path }}" ]]; then
          bash ${{ inputs.integration-test-path }}
        else
          echo "No integration test script found at ${{ inputs.integration-test-path }}"
        fi
      shell: bash
